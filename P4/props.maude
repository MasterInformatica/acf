(omod PROPS is
    pr SATISFACTION .
    pr OBJETOS .

    vars O O' O'' O''' : Oid .
    vars S S' : String .
    vars C C' C'' : Configuration .
    vars N N' : Nat .
    var CS : CjtoString .
    
*** Ejercicio 22
    subsort Configuration < State .


*** Ejercicio 23 (propiedades)
    *** Comprobar si un nodo existe dada su IP
    op existeNodo : String -> Prop [ctor] .
    eq < O : Proceso | datos : < O' : Nodo | IP : S > C > 
	C' 
	|= existeNodo( S ) = true .

    *** Comproar si un nodo tiene cierto amigo con Oid O'''
    op tieneAmigo : Oid -> Prop [ctor] .
    eq < O : Proceso | datos : < O' : Nodo | amigos : S - CS > C > 
	< O'' : Proceso | datos : < O''' : Nodo | IP : S > C' >
	C''
	|= tieneAmigo( O''' ) = true .

    *** Comprobar si existe un mensaje para un nodo con ip S
    *** NOTA: podemos comprobar si hay un mensaje en un nodo que se envia,
    *** en un canal de salida,
    *** en un canal de entrada, 
    *** en el centro antes de traducir
    *** en el centro despues de traducir
    *** en el nodo antes de procesar,
    ***....
    *** AquÃ­ comprobamos si ese mensaje existen en un proceso antes de procesar (puede coincidir con el nodo que envia o con el centro)
    *** BORRAR ESTE COMENTARIO
    op hayMensajePara : String -> Prop [ctor] .
    eq 	< O : Proceso | datos : ( to S : S' ) C >
	C'
	|= hayMensajePara ( S ) = true .




    *** Comprobar si la cantidad de nodos es la dada por arg.
    op hayNnodos : Nat -> Prop [ctor] .
    eq C |= hayNnodos( N ) = 
	cuentaNodos( C ) == N .
   
    op cuentaNodos : Configuration -> Nat . 
    eq cuentaNodos( < O' : Proceso | datos : < O : Nodo | > C > C' ) 
      = 1 + cuentaNodos( C C' ) .
    eq cuentaNodos( C ) = 0 [owise] .

    ***  Comrpobar si hay N extremos
    op hayNextremos : Nat -> Prop [ctor] .
    eq C |= hayNextremos( N ) =
	cuentaExtremos( C ) == N .

    op cuentaExtremos : Configuration -> Nat .
    eq cuentaExtremos( < O' : Proceso | datos : < O : Extremo | > C > C' ) 
      = 1 + cuentaExtremos( C C' ) .
    eq cuentaExtremos( C ) = 0 [owise] .
    

    *** Compobar si un canal identificado por un Oid funciona
    op canalFunciona : Oid -> Prop [ctor] .
    eq < O : Canal | estado : ok > C
	|= canalFunciona( O ) = true .

endom)
    

