load utils.maude
load full-maude 

(omod OBJETOS is
    pr STRING .
    pr UTILS .
    pr NAT .

    vars Q Q' : Qid .
    vars O O' O'' O''' : Oid .
    vars S S' S'' : String .
    vars Ob Ob' : Object .
    vars T T' : Tabla .
    vars M M' : Msg .
    vars C C' : Configuration . 
    vars L L' : listaMsg .
    var CS : CjtoString .


*** Ejercicio 1
    class Proceso | datos : Configuration .

*** Ejercicio 2, 10 y 11
    class Nodo | IP : String , Estado : State , recibido : String, 
                 amigos : CjtoString .
    op n : Qid -> Oid [ctor] .

    sort State .
    ops inactivo esperando activo : -> State [ctor] .


*** Ejercicio 3
    class Centro | tabla : Tabla .
    subclass Centro < Nodo .
    *** y Sort Tabla


*** Ejercicio 4
    class Extremo | centro : Oid .
    subclass Extremo < Nodo .
    op null : -> Oid [ctor] .
    

*** Ejercicio 5
    *** Se asume que el origen siempre va a ser un extremo, y el destino el centro.
    *** La listaOrigen guarda los mensajes para el origen (extremo).
    *** La listaDestino guarda los mensajes para el destino (centro).
    class Canal | origen : Oid, destino : Oid, listaOrigen : listaMsg, 
                  listaDestino : listaMsg, estado : EstadoCanal .
    
    sort EstadoCanal .
    ops ok error : -> EstadoCanal [ctor] .
    
    sort listaMsg .
    subsort Msg < listaMsg .
    op lmv : -> listaMsg [ctor] .
    op _/_ : listaMsg listaMsg -> listaMsg [ctor assoc id: lmv ] .



*** Ejercicio 6
    *** info(Self, IP)
    msg info : Oid String -> Msg .
   
    rl [send-info] :
	< O : Extremo | Estado : inactivo , IP : S, centro : null > 
      => 
	< O : Extremo | Estado : esperando > 
	info(O, S) .

*** Ejercicio 7
    *** respuesta-info(To, From)
    msg respuesta-info : Oid Oid -> Msg .

    *** receive info and send ack-info
    rl [ack-receive-info] : 
	info(n(O), S) 
	< n(O') : Centro | tabla : T > 
      => 
	< n(O') : Centro | tabla : insert({ S, O }, T) , Estado : activo > 
	respuesta-info( O, O') .


    rl [receive-ack-info] : 
	respuesta-info(O, O') 
	< n(O) : Extremo | centro : null, Estado : esperando > 
      => 
	< n(O) : Extremo | centro : O', Estado : activo > .


*** Ejercicio 12
    msg to_:_ : String String -> Msg .


*** Ejercicio 13
    msg to_:_ : Oid String -> Msg .


*** Ejercicio 14
 *** 14 a) insertar en el canal
    *** Solo insertamos si es un mensaje que no tenemos que procesar nosotros (de salida).
    
    *** Sabemos que O es extremo porque se asume que siempre son origen del canal.
    rl [extremo-to-channel_info] : 
	< O : Proceso | datos : C info(n(O), S) >
	< O' : Canal | origen : O, listaDestino : L, estado : ok > 
      => 
	< O : Proceso | datos : C >
	< O' : Canal | origen : O, listaDestino : L / info(n(O), S),
		       estado : ok > .

    *** Sabemos que es un mensaje al centro porque es string-string
    rl [extremo-to-channel_to] :
	< O : Proceso | datos : C (to S : S') >
	< O' : Canal | origen : O, listaDestino : L, estado : ok >
      =>
	< O : Proceso | datos : C >
	< O' : Canal | origen : O, listaDestino : L / (to S : S'), 
		       estado : ok > .

    
    rl [centro-to-channel_respuesta-info] : 
     	< O : Proceso | datos : C respuesta-info( O', O ) >
     	< O'' : Canal | origen : O', destino : O, listaOrigen : L, 
		       estado : ok > 
      => 
     	< O : Proceso | datos : C >
     	< O'' : Canal | origen : O', destino : O, 
			listaOrigen : L / respuesta-info ( O', O ), 
			estado : ok >  .

    *** Sabemos que es un mensaje desde el centro porque es Oid-String
    rl [centro-to-channel_to] :
	< O : Proceso | datos : C ( to O' : S ) >
	< O'' : Canal | origen : O', destino : O, listaOrigen : L,
			estado : ok >
      =>
	< O : Proceso | datos : C >
	< O'' : Canal | origen : O', destino : O, 
			listaOrigen : L / ( to O' : S ), estado : ok > .


    *** 14 b) extraer del canal.
    rl [channel-to-extremo] :
	< O : Proceso | datos : C >
	< O' : Canal | origen : O, listaOrigen : L / M, estado : ok >
      =>
	< O : Proceso | datos : C M >
	< O' : Canal | listaOrigen : L > .
    
    rl [channel-to-centro] :
	< O : Proceso | datos : C >
	< O' : Canal | destino : O, listaDestino : L / M, estado : ok >
      =>
	< O : Proceso | datos : C M >
	< O' : Canal | destino : O, listaDestino : L , estado : ok > .
    


*** Ejercicio 15

    ***************************************************************
    *** OJO: Si se deja descomentado se estropea el canal y no  ***
    *** llega ning√∫n mensaje				        ***
    ***************************************************************
 ***(
    rl [estropea-canal] : 
    	< O : Canal | estado : ok >
      =>
    	< O : Canal | estado : error > .
  )    
  


*** Ejercicio 16

    *** Genera todos los mensajes para todos los amigos antes de enviarlos.
    op generaHellos : CjtoString -> Configuration .
    eq generaHellos( S ) = (to S : "hola" ) .
    eq generaHellos( S - CS ) = (to S : "hola") generaHellos( CS ) .

    *** Para evitar entrar en esta regla infinitas veces, se borra la lista de 
    *** amigos cuando se envia el primer hello.
    rl [saluda-amigos] :
	< O : Nodo | Estado : activo , amigos : S - CS > 
      =>
	< O : Nodo | Estado : activo , amigos : {""}  > 
	generaHellos ( S - CS ) .

    

*** Ejercicio 17
    rl [centro-convierte-msg] :
	( to S : S' )
	< O : Centro | Estado : activo , tabla : ( { S , O' } ) T >
      =>
	< O : Centro | Estado : activo , tabla : ( { S , O' } ) T >
	( to O' : S' ) .



*** Ejercicio 18
    rl [procesa-to-extremo] :
    	( to O : S )
    	< n(O) : Extremo | Estado : activo , recibido : S' >
      =>
    	< n(O) : Extremo | Estado : activo, recibido : S' + S > .


    rl [procesa-to-centro] :
	(to S : S')
	< O : Centro | Estado : activo , IP : S , recibido : S'' >
      =>
	< O : Centro | Estado : activo , IP : S , recibido : S'' + S' > .


*** Ejercicio 19
    op numObjetos : Configuration -> Nat .
    eq numObjetos( Ob C ) = 1 + numObjetos(C) .
    eq numObjetos( C ) = 0 [owise] .


endom)


eof
*** Ejercicio 21

( search inicio =>* C:Configuration s.t. 
      numObjetos(inicio) =/= numObjetos(C:Configuration) .)    

   *** Inicio2 solo tiene 3 nodos
( search inicio2 =>* C:Configuration s.t. 
      numObjetos(inicio2) =/= numObjetos(C:Configuration) .)    
