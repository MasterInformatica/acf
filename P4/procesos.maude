mod TABLA is
    pr STRING .
    pr CONFIGURATION .
    pr QID .
    subsort Qid < Oid .

    sorts Tabla Pareja .
    subsort Pareja < Tabla .

    op {} : -> Tabla [ctor] .
    op __ : Tabla Tabla -> Tabla [ctor comm assoc id: {} ] .
    op {_,_} : String Oid -> Pareja [ctor] .

    vars P P' : Pareja .
    vars T T' : Tabla .
    vars S S' : String .
    vars O O' : Oid .


    op insert : Pareja Tabla -> Tabla .
    eq insert(P,{}) = P .
    eq insert( { S, O }, { S, O' } T) = { S, O } T .
    eq insert( P, T ) = P T [owise] .

    op delete : String Tabla -> Tabla .
    eq delete(S,{}) = {} .
    eq delete(S, { S, O } T ) = T .
    eq delete(S, T ) = T [owise] .

endm

load full-maude 



(omod OBJETOS is
    pr STRING .
    pr TABLA .
    

    
    vars Q Q' : Qid .
    vars O O' O'' : Oid .
    vars S S' : String .
    vars Ob Ob' : Object .
    vars T T' : Tabla .
    vars M M' : Msg .

*** Ejercicio 1
    class Proceso | datos : Configuration .
*** Ejercicio 2
    class Nodo | IP : String , Estado : State .
    op n : Qid -> Oid [ctor] .

    sort State .
    ops inactivo esperando activo : -> State [ctor] .

*** Ejercicio 3
    class Centro | tabla : Tabla .
    subclass Centro < Nodo .
    *** y MOD Tabla

*** Ejercicio 4
    class Extremo | centro : Oid .
    subclass Extremo < Nodo .
    op null : -> Oid [ctor] .
    
    op extremo : Qid -> Object . 
    eq extremo(Q) = < Q : Extremo | centro : null > .

*** Ejercicio 5
    class Canal | origen : Oid, destino : Oid, listaOrigen : listaMsg, 
                  listaDestino : listaMsg, estado : EstadoCanal .
    
    sort EstadoCanal .
    ops ok error : -> EstadoCanal [ctor] .
    
    sort listaMsg .
    subsort Msg < listaMsg .
    op lmv : -> listaMsg [ctor] .
    op _|_ : listaMsg listaMsg -> listaMsg [ctor assoc id: lmv ] .

 ***(
*** TODO : get destino
   op getDest : Msg Canal ~> Oid .
    eq getDest( respuesta-info( O, O' ), < ) = O .
    eq getDest( info( O, S) ) = 


    rl [origen-to-channel] : 
	< O : Canal | origen : O', listaDestino : L , estado : ok >
	M < O
)***	


*** Ejercicio 6
    *** info(Self, IP)
    msg info : Oid String -> Msg .
   
    rl [send-info] : 
	< O : Extremo | Estado : inactivo , IP : S, centro : null > 
      => 
	< O : Extremo | Estado : esperando > 
	info(O, S) .

*** Ejercicio 7
    *** respuesta-info(To, From)
    msg respuesta-info : Oid Oid -> Msg .

    *** receive info and send ack-info
    rl [ack-info] : 
	info(O, S) 
	< O' : Centro | tabla : T > 
      => 
	< O' : Centro | tabla : T { S,O }, Estado : activo > 
	respuesta-info( O, O') .


    rl [receive-ack-info] : 
	respuesta-info(O, O') 
	< O : Extremo | centro : null, Estado : esperando > 
      => 
	< O : Extremo | centro : O', Estado : activo > .
   
endom)


*** Ejercicio 8
(mod EJEMPLO is 
    pr CONFIGURATION .
    pr OBJETOS .
    pr TABLA .

    var O : Oid .

    op tv : -> Tabla .
    eq tv = {} .

    ops n1 n2 n3 :  -> Configuration .
    eq n1 = < n( 'P1 ) : Extremo | IP : "1.1.1.1", Estado : inactivo, centro : null > .
    eq n2 = < n( 'P2 ) : Extremo | IP : "2.2.2.2", Estado : inactivo, centro : null > .
    eq n3 = < n( 'P3 ) : Extremo | IP : "3.3.3.3", Estado : inactivo, centro : null > .

    op c : -> Configuration .
    eq c = < n( 'C ) : Centro | IP : "4.4.4.4", Estado : inactivo, tabla : tv > .

    op inicio : -> Configuration . 
    eq inicio = c n1 n2 n3 .

endm)


*** ( red < 'P1 : Proceso | datos : < n('P1) : Nodo | IP : "123", Estado : inactivo > > . )


*** <_:_ | _ > : Object < Configuration
