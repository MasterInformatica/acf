mod TEST is
    pr NAT .
    pr STRING .
    pr BOOL .

    vars Q Q' : Cola .
    vars C C' : Cjto .
    vars P P' : Persona .
    vars S S' : String .
    vars E N N1 N2 N3 : Nat .
    vars W W' : Vipedad .
    vars V V' : Bolsa .
    vars Li Li' : Lista .
    vars L L' : Local .
******************************
*** Estrucutras auxiliares ***
******************************
    
    sorts Cjto Lista .

    op lv : -> Lista [ctor] .
    op _-_ : Persona Lista -> Lista [ctor assoc id: lv ] .

    op cv : -> Cjto [ctor] .
    op __ : Persona Cjto -> Cjto [ctor assoc comm id: cv ] .

    op len : Cjto -> Nat .
    eq len( cv ) = 0 .
    eq len( P C ) = 1 + len( C ) .

    sort Bolsa .
    sort Vipedad .
    ops vip novip : -> Vipedad [ctor] .

    *** < Alcohol, Refrescos, Hielo >
    op < _ , _ , _ > : Nat Nat Nat -> Bolsa [ctor] . 



***************************
*** Def. tipos problema ***
***************************

*** Personas ***
    *** Contemplamos 3 tipos de persona. El manager, las personas con bolsa
    *** y las personas sin bola (las penultimas se pueden convertir en las ultimas)    
    sort Persona .
    *** p(Nombre,Edad,Bolsa,Vipedad,Bebidas)
    op p : String Nat Bolsa Vipedad Nat -> Persona [ctor] . 
    ops pSB manager : String Nat Nat -> Persona [ctor] .

    op dabi : -> Persona  .
    eq dabi = manager( "Dabi", 23, 0 ) .

    op pTopSB : Persona -> Persona .
    eq pTopSB( p(S, E, V, W, N) ) = pSB(S, E, N) .
    eq pTopSB( P ) = P [owise] .
    
    op edad : Persona -> Nat .
    eq edad( p(S, E, V, W, N )) = E .
    eq edad( manager(S, E, N)) = E .
    eq edad( pSB(S, E, N)) = E .
    
    op isVip : Persona -> Bool .
    eq isVip( p(S, E, V, vip, N ) ) = true .
    eq isVip( P ) = false [owise] .


    *** lugares
    sorts Botellon Cola Local .
    subsort Botellon < Cjto .
    subsort Persona < Botellon Cola Cjto Lista .

    sort Estado .
    op [_,_,_] : Botellon Cola Local -> Estado [ctor] .


*** local ***
    *** local( Aforo, Alcohol, Refresco, Personas )
    op l : Nat Nat Nat Cjto -> Local [ctor] .
    
    op completo : Local -> Bool .
    eq completo( l(N, N1, N2, C)) = N == len(C) .


    op insertaLocal : Persona Local -> Local .
    ceq insertaLocal( P,  l(N, N1, N2, C)) = 
	l(N, N1, N2, pTopSB(P) C) 
      if not completo( l(N, N1, N2, C)) .
    eq insertaLocal(P, L) = L [owise] .


    op puedePasar : Persona -> Bool .
    ceq puedePasar( p(S, E, V, W, N) ) = true 
      if E > 17 /\
	  N < 3 .
    eq puedePasar( P ) = false [owise] .


*** Cola ***
    *** vip | novip *** crece hacia la derecha
    op _ | _ : Lista Lista -> Cola [ctor] .
    
    op empty : Cola -> Bool .
    eq empty( lv | lv ) = true .
    eq empty( Q ) = false [owise] .

    op insertaCola : Persona Cola -> Cola .
    ceq insertaCola(P, Li | Li' ) = Li | ( Li' - P )
      if not isVip(P) .
    eq insertaCola(P, Li | Li' ) = ( Li - P ) | Li' [owise] .


    sort Pareja .
    op { _ , _ } : Persona Cola -> Pareja [ctor] .
    
    op pop : Cola ~> Pareja .
    eq pop( (P - Li) | Li' ) = { P , (Li | Li') } .
    eq pop( cv | (P - Li) ) = { P , (lv | Li) } .

endm
