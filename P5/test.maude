mod FIESTA is
    pr NAT .
    pr STRING .
    pr EXT-BOOL .



****************************
*** Variables Auxiliares ***
****************************
    vars P P' : Persona .

    vars Q Q' : Cola .
    vars Li Li' : Lista .
    vars C C' : Cjto .

    vars L L' : Local .

    vars N N1 N2 N3 N4 N5 O O' E E' : Nat .

    vars B B' : Bolsa .
    vars S S' : String .
    vars W W' : Vipedad .
    vars St St' : Estado .


******************************
*** Estrucutras auxiliares ***
******************************
    
    sorts Cjto Lista .

    op lv : -> Lista [ctor] .
    op _-_ : Lista Lista -> Lista [ctor assoc id: lv ] .

    *** Comprueba si una persona (dada por su nombre) est치 en la lista
    op isInLista : Lista String -> Bool .
    eq isInLista(lv, S) = false .
    eq isInLista( P - Li, S) = nombre(P) == S or-else isInLista(Li, S) .


    op cv : -> Cjto [ctor] .
    op __ : Cjto Cjto -> Cjto [ctor assoc comm id: cv ] .


    op isInCjto : Cjto String -> Bool .
    eq isInCjto( P C , S) = nombre(P) == S or-else isInCjto(C, S) .
    eq isInCjto( cv, S) = false .


    op len : Cjto -> Nat .
    eq len( cv ) = 0 .
    eq len( P C ) = 1 + len( C ) .

    sort Bolsa .
    sort Vipedad .
    ops vip novip : -> Vipedad [ctor] .

    *** < Alcohol, Refrescos, Hielo >
    op < _ , _ , _ > : Nat Nat Nat -> Bolsa [ctor] . 



***************************
*** Def. tipos problema ***
***************************

*** Personas ***
    *** Contemplamos 3 tipos de persona. El manager, las personas con bolsa
    *** y las personas sin bola (las penultimas se pueden convertir en las ultimas)    
    sort Persona .
    *** p(Nombre,Edad,Bolsa,Vipedad,Bebidas)
    op p : String Nat Bolsa Vipedad Nat -> Persona [ctor] . 
    ops pSB manager : String Nat Nat -> Persona [ctor] .

    op dabi : -> Persona  .
    eq dabi = manager( "Dabi", 23, 0 ) .

    op pTopSB : Persona -> Persona .
    eq pTopSB( p(S, E, B, W, N) ) = pSB(S, E, N) .
    eq pTopSB( P ) = P [owise] .

    op nombre : Persona -> String .
    eq nombre( p(S, E, B, W, N )) = S .
    eq nombre( manager(S, E, N)) = S .
    eq nombre( pSB(S, E, N)) = S .

    op edad : Persona -> Nat .
    eq edad( p(S, E, B, W, N )) = E .
    eq edad( manager(S, E, N)) = E .
    eq edad( pSB(S, E, N)) = E .

    op alcohol : Persona -> Nat .
    eq alcohol( p(S, E, < N, N2, N1 >, W, N3 )) = N .
    eq alcohol( manager(S, E, N)) = 0 .
    eq alcohol( pSB(S, E, N)) = 0 .

    op refrescos : Persona -> Nat .
    eq refrescos( p(S, E, < N1, N, N2 >, W, N3 )) = N .
    eq refrescos( manager(S, E, N)) = 0 .
    eq refrescos( pSB(S, E, N)) = 0 .

    op hielo : Persona -> Nat .
    eq hielo( p(S, E, < N1, N2, N >, W, N3 )) = N .
    eq hielo( manager(S, E, N)) = 0 .
    eq hielo( pSB(S, E, N)) = 0 .
        
    op copas : Persona -> Nat .
    eq copas( p(S, E, B, W, N )) = N .
    eq copas( manager(S, E, N)) = 0 .
    eq copas( pSB(S, E, N)) = N .

    op isVip : Persona -> Bool .
    eq isVip( p(S, E, B , vip, N ) ) = true .
    eq isVip( P ) = false [owise] .


    *** lugares
    sorts Cola Local .
    subsort Persona < Cjto .
    subsort Persona < Lista .
    

    sort Estado .
    op [ _ , _ , _ ] : Cjto Cola Local -> Estado [ctor] .


*** local ***
    *** local( Aforo, Alcohol, Refresco, Personas )
    op l : Nat Nat Nat Cjto -> Local [ctor] .
    
    op completo : Local -> Bool .
    eq completo( l(N, N1, N2, C)) = N == len(C) .


    op insertaLocal : Persona Local -> Local .
    ceq insertaLocal( P,  l(N, N1, N2, C)) = 
	l(N, N1, N2, pTopSB(P) C) 
      if not completo( l(N, N1, N2, C)) .
    eq insertaLocal(P, L) = L [owise] .


    op puedePasar : Persona -> Bool .
    ceq puedePasar( p(S, E, B, W, N) ) = true 
      if E > 17 /\
	  N < 3 .
    eq puedePasar( P ) = false [owise] .


*** Cola ***
    *** vip | novip *** crece hacia la derecha
    op _ | _ : Lista Lista -> Cola [ctor] .
    
    op empty : Cola -> Bool .
    eq empty( lv | lv ) = true .
    eq empty( Q ) = false [owise] .

    op insertaCola : Persona Cola -> Cola .
    ceq insertaCola(P, Li | Li' ) = Li | ( Li' - P )
      if not isVip(P) .
    eq insertaCola(P, Li | Li' ) = ( Li - P ) | Li' [owise] .


    sort Pareja .
    op { _ , _ } : Persona Cola -> Pareja [ctor] .
    
    op pop : Cola ~> Pareja .
    eq pop( (P - Li) | Li' ) = { P , (Li | Li') } .
    eq pop( lv | (P - Li) ) = { P , (lv | Li) } .

    *** Dado el nombre de una persona, comprueba si esta est치 en la cola
    op isInCola : Cola String -> Bool .
    eq isInCola( Li | Li' , S) = 
	isInLista(Li , S) or-else isInLista(Li' , S) .

**************************
*** Ejemplos de inicio ***
**************************

    ops mike peter lucille lukas juan fiona : -> Persona .
    eq mike = p("Mike", 23, < 2 , 2 , 3 > , vip, 0 ) .
    eq peter = p("Peter", 20, < 1 , 2 , 1 > , vip, 0 ) .
    eq lucille = p("Lucille", 16, < 2 , 1 , 0 > , novip, 0 ) .

    eq lukas = p("Lukas", 24, < 0, 0, 0 > , vip, 0 ) . 
    eq juan = p("Juan", 18, < 0, 0, 0 > , novip, 0 ) .
    eq fiona = p( "Fiona", 12, < 0, 0, 0 > , vip, 0 ) .



    op local : -> Local .
    eq local = l(5, 6, 5, dabi) .
    
    op inicio : -> Estado .
    eq inicio = [ mike peter lucille lukas juan fiona, lv | lv , local ] .

    op inicio2 : -> Estado .
    eq inicio2 = [ cv, lv | lucille, local ] .

    ops inicioMike inicioPeter : -> Estado .
    eq inicioMike = [ mike, lv | lv, local ] .
    eq inicioPeter = [ peter, lv | lv, local ] .

******************************
*** Reglas, comportamiento ***
******************************

    ****************
    *** Botellon *** 
    ****************
    
*** Beber Refresco
    rl [refresco-botellon-propio] :
	[ p( S, E, < N, s(N1), s(O) > , W, N2 ) C , Q , L ]
      => 
	[ p( S, E, < N, N1, O > , W, N2 ) C , Q , L ] .
    
    rl [refresco-botellon-ajeno] :
	[ p( S, E, < N, s(N1), 0 > , W, N2 ) 
	p( S', E', < N3, N4, s(O') > , W', N5 ) C , Q , L ]
      => 
	[ p( S, E, < N, N1, 0 > , W, N2 ) 
	p( S', E', < N3, N4, O' > , W', N5 ) C , Q , L ] .

*** Beber Cubata
    rl [cubata-botellon-propio] :
	[ p( S, E, < s(N), s(N1), s(O) > , W, N2 ) C, Q, L ]
      => 
	[ p( S, E, < N, N1, O > , W, s(N2) ) C, Q, L ] .
    
    rl [cubata-botellon-ajeno] :
	[ p( S, E, < s(N), s(N1), 0 > , W, N2 ) 
	p( S', E', < N3, N4, s(O') > , W', N5 ) C, Q, L ]
      => 
	[ p( S, E, < N, N1, 0 > , W, s(N2) ) 
	p( S', E', < N3, N4, O' > , W', N5 ) C, Q, L ] .

*** Del botellon se decide ir a la cola
    rl [botellon-to-cola] : 
	[ P C, Q, L ]
      =>
	[ C, insertaCola(P, Q ) , L ] .    

*** De la cola al local (si puede)
    crl [cola-to-local-ok] :
	[ C, Q, L] 
      => 
	[ C, Q', insertaLocal( P, L )]
      if  not completo(L) /\
	  not empty(Q) /\
	  {P, Q'} := pop(Q) /\
	  puedePasar(P) .

*** (puede que no pueda pasar al local)
    crl [cola-to-local-no]  :
     	[ C, Q, L ]
      =>
	[ P C, Q', L ]
      if not completo(L) /\
	  not empty(Q) /\
	  {P, Q'} := pop(Q) /\
	  not puedePasar(P) .


*** (Beber refresco en local
    rl [refresco-local] :
	l( N, N1, s(N2), pSB( S, E, N3 ) C )
      =>
	l( N, N1, N2, pSB( S, E, N3 ) C ) .)

***  Beber copa (solo si no lleva 4)
    crl [copa-local] :
	l(N, s(N1), s(N2), (pSB(S, E, N3) C))
      =>
	l(N, N1, N2, (pSB(S, E, s(N3)) C))
      if N3 < 4 .

*** Dabi echa a alguien del local
    crl [echa-local] :
	l(N, N1, N2, (pSB(S, E, N3) C))
    =>
	l(N, N1, N2, C)
      if N3 == 4 .


*** La gente se va del local
    rl [salir-local] :
	l(N, N1, N2, (pSB(S, E, N3) C)) ***no es dabi
    =>
	l(N, N1, N2, C) .
endm

load model-checker.maude

mod PROPS is
    pr SATISFACTION .
    pr FIESTA .

    subsort Estado < State .

    vars P P' : Persona .

    vars Q Q' : Cola .
    vars Li Li' : Lista .
    vars C C' : Cjto .

    vars L L' : Local .

    vars N N1 N2 N3 N4 N5 O O' E E' : Nat .

    vars B B' : Bolsa . *** Volsa xD
    vars S S' : String .
    vars W W' : Vipedad .
    vars St St' : Estado .



    *** Se ha acabado el alcohol en el local
    op noAlcoholLocal : -> Prop .
    eq [ C, Q, l(N, 0, N1, C') ] |= noAlcoholLocal 
      = true .

    *** Se han acabado los refrescos en el local
    op noRefrescosLocal : -> Prop .
    eq [ C', Q, l(N, N1, 0, C) ] |= noRefrescosLocal 
      = true .

    *** Alguien con nombre est치 en la cola
    op estaEnCola : String -> Prop .
    eq [ C', Q , L ] |= estaEnCola(S) 
      = isInCola(Q, S) .

    *** Alguien con nombre est치 en el local
    op estaEnLocal : String -> Prop .
    eq [ C', Q, l(N, N1, N2, C ) ] |= estaEnLocal(S)
      = isInCjto(C, S) .

    *** Hay menos de N personas en el local
    op hayMenosPersonasLocal : Nat -> Prop .
    eq [ C', Q, l(N3, N1, N2, C ) ] |= hayMenosPersonasLocal(N)
      = len(C) <= N .
    
    *** Una persona ha bebido demasiado.
    op bebidoDemasiado : -> Prop .
    eq [ C', Li | Li' , l(N, N1, N2,  C ) ]  |= bebidoDemasiado
      =         bebidoMasDe( C   , 3 ) 
	or-else bebidoMasDe( C'  , 4 ) 
	or-else bebidoMasDe( Li  , 4 ) 
	or-else bebidoMasDe( Li' , 4 ) . 

    op bebidoMasDe : Cjto Nat -> Bool .
    eq bebidoMasDe( cv , N ) = false .
    eq bebidoMasDe( P C , N ) = copas(P) >= N or-else bebidoMasDe(C , N) .

    op bebidoMasDe : Lista Nat -> Bool .
    eq bebidoMasDe( cv , N ) = false .
    eq bebidoMasDe( P - Li , N ) = copas(P) >= N or-else bebidoMasDe(Li , N) .

    *** hay hielo en la zona de botellon
    op hayHieloBotellon : -> Prop .
    eq [ C', Q, L ] |= hayHieloBotellon 
      = numHielo(C') > 0 .

    op numHielo : Cjto -> Nat .
    eq numHielo( cv ) = 0 .
    eq numHielo( P C ) = hielo(P) + numHielo(C) .


    *** hay refresco en la zona de botellon
    op hayRefrescoBotellon : -> Prop .
    eq [ C, Q, L ] |= hayRefrescoBotellon 
      = numRefresco(C) > 0 .

    op numRefresco : Cjto -> Nat .
    eq numRefresco( cv ) = 0 .
    eq numRefresco( P C ) = refrescos(P) + numRefresco(C) .


    *** hay alcohol en la zona de botellon
    op hayAlcoholBotellon : -> Prop .
    eq [ C', Q, L ] |= hayAlcoholBotellon 
      = numAlcohol(C') > 0 .

    op numAlcohol : Cjto -> Nat .
    eq numAlcohol( cv ) = 0 .
    eq numAlcohol( P C ) = alcohol(P) + numAlcohol(C) .
    
endm

mod CHECK is
pr PROPS .
pr MODEL-CHECKER .
pr LTL-SIMPLIFIER .

endm

eof

*******************
*** Ejercicio 4 ***
*******************

*** Dabi siempre est치 en el local
***( Siempre es cierta, ya que no hay ninguna regla que saque a Dabi del local )
red modelCheck(inicio2, [] estaEnLocal("Dabi")) .

*** Si el aforo no se supera al principio, nunca se supera.
***( Siempre es cierta. La regla no permite introducir a nadie en el local si el aforo est치 completo)
red modelCheck(inicio2, hayMenosPersonasLocal(6) -> [] hayMenosPersonasLocal(6)) .

*** Si alguien est치 en la cola acaba entrando.
***( Falso. Si hay una menor en la fiesta, esta nunca entra en el local)
red modelCheck(inicio, [] ( estaEnCola("Lucille") -> <> estaEnLocal("Lucille"))) .

*** El alcohol nunca se acaba.
***( La ejecucion da cierta para este estado en concreto, ya que hay una menor que tiene m치s alcohol que refrescos, por lo que el alcohol nunca se va a acabar. Y adem치s, al ser menor no se va de la fiesta. Sin embargo, esta regla podr칤a ser falsa en otros estados de inicio (por ejemplo, eliminando a la menor de la fiesta) )
red modelCheck(inicio, [] (hayAlcoholBotellon \/ ~ noAlcoholLocal) ) .

*** Los refrescos siempre se acaban.
***( Falso. La gente se puede ir del local sin haber gastado todos los refrescos del mismo)
red modelCheck(inicio, [] <> (~ hayRefrescoBotellon /\ noRefrescosLocal )) .

*** Si en alg칰n momento alguien bebe de m치s, y permanece en ese estado
*** para siempre.
***( Falso. Una persona que haya bebido demasiado del local, es echado )
red modelCheck(inicio, [] ( <> bebidoDemasiado -> [] bebidoDemasiado)) .

*** Si hay hielo, refrescos y alcohol en la zona de botell칩n, entonces
*** en alg칰n momento alguien bebe de m치s. 
***( Falso. Que haya suficiente bebida en la zona de botell칩n no implica que la gente beba )
red modelCheck(inicio, [] ( <> (hayAlcoholBotellon /\ hayRefrescoBotellon /\ hayHieloBotellon) -> <> bebidoDemasiado ) ) .

eof

